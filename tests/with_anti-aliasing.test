# Test Scene 1
# A simple quad viewed from different camera positions

size 640 480
#output out2.ppm

#anti-aliasing 4

# Now specify the camera. This is what you should implement.
# This file has 4 camera positions. Render your scene for all 4.

camera 0 0 9 0 0 0 0 1 0 30
#camera 0 -3 3 0 0 0 0 1 0 30
#camera -4 0 1 0 0 1 0 0 1 45
#camera -4 -4 4 1 0 0 0 1 0 30

# lighting/material definitions
# for initial testing, you should get the geometry right
# you may want to use dummy (constant) shading, ignoring these lines


#directional 1 0 1 .5 .5 .5
#directional 0 0 1 .5 .5 .5
directional -0.5 0 4 .5 .5 .5

#point -1.5 0 4 .5 .5 .5
#attenuation 1.2 0 0
diffuse 0 1 0
specular 0 0 0

# Now specify the geometry
# Again, for initial testing, maybe you want to implement a dummy
# ray-plane intersection routine, instead of reading this fully.
# Though it's probably simpler you just implement this, for later
# parts of the assignment.

maxverts 3

vertex -1 -1 0
vertex +1 -1 0
vertex +1 +1 0
#vertex -1 +1 0

pushTransform
translate 1.2 .4 -.7
shininess 60
ambient 0 1 .5
diffuse 0.6 0.8 0.5
specular 1 1 1
rotate 0 1 0 10
tri 0 1 2
#tri 0 2 3
popTransform

maxdepth 5

ambient .1 .1 .1

#center
pushTransform
shininess 100
#scale 1.3 1 1
diffuse 0 1 1
specular 1 1 1
scale 1.4 1 1
sphere 0 0 0 0.5
popTransform

#red
pushTransform
translate 1.3 0 0
shininess 100
diffuse 1 0 0
specular 1 1 1
sphere 0 0 0 0.5
popTransform


#green
pushTransform
translate -0.1 0 0
translate 0 0 1.8
shininess 100
diffuse 0 1 0
specular 1 1 1
sphere 0 0 0 0.2
popTransform

#left
pushTransform
translate -1.3 0 0
shininess 128
diffuse 1 0.5 0
specular 0.6 0.01 0.8
sphere 0 0 0 0.5
popTransform

#blue
pushTransform
translate 0 1.3 0
shininess 100
diffuse 0 0 1
specular 1 1 1
sphere 0 0 0 0.5
popTransform

pushTransform
shininess 100
translate 0 -1.3 0
diffuse 1 1 0
specular 1 1 1
sphere 0 0 0 0.5
popTransform
